$script = <<SCRIPT
	netsh advfirewall firewall add rule name="ICMP Allow incoming V4 echo request" protocol=icmpv4:8,any dir=in action=allow
SCRIPT


Vagrant.configure("2") do |config|
	
	config.vm.provider "virtualbox" do |v|
        v.memory = 4096
        v.cpus = 2
    end

	config.vm.define "test" do |test|
		test.vm.box = "gusztavvargadr/w16s"
		test.vm.network "public_network", type: "dhcp"
		# test.vm.network "private_network", ip: "192.168.10.24"
		test.vm.hostname = "WS2016"
#		test.vm.synced_folder "C:/vagrant/share", "C:/Users/vagrant/Desktop"
#		test.vm.provision "shell", inline: $script
	
		test.vm.provision "shell", privileged: "true", powershell_elevated_interactive: "true", inline: <<-SHELL
##Create folders. two methods		
#		New-Item -ItemType directory -Path "C:/Users/vagrant/Desktop/newDir"
#		new-item "C:/Users/vagrant/Desktop/mynewdir" -itemtype directory
#		echo "Hello It`s Me!!!"
## Enable ping. Two methods
#		netsh advfirewall firewall add rule name="ICMP Allow incoming V4 echo request" protocol=icmpv4:8,any dir=in action=allow
#		Import-Module NetSecurity
#		New-NetFirewallRule -Name Allow_Ping -DisplayName "Allow Ping"  -Description "Packet Internet Groper ICMPv4" -Protocol ICMPv4 -IcmpType 8 -Enabled True -Profile Any -Action Allow
##Install Chokolatey:
		Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
##Install IIS with PowerShell:		
		Install-WindowsFeature -name Web-Server -IncludeManagementTools
##Install MsBuild
		Install-Module -Name Invoke-MsBuild -RequiredVersion 2.6.1

		SHELL
	
	config.vm.provision :shell, :path => "start.bat"
	config.vm.provision :shell, :path => "SetupIIS.ps1"
		
	end
end	

###>    vagrant reload  --provision
   
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

### ============================================================
### Two ways to run scripts
#$infoScript = <<SCRIPT
#  echo 'IP-addresses of the vm ...'
#  ifconfig
#SCRIPT

# config.vm.provision "shell", inline: <<-SHELL
#    apt-get update
#    apt-get install -y apache2 php5 libapache2-mod-php5#
#  SHELL
  
  
#  config.vm.provision "shell", inline: $infoScript,
#      run: "always"




#____________________________________________________
#Install IIS


# Install-WindowsFeature -name Web-Server -IncludeManagementTools



  #config.vm.provision :shell, :path => "test.sh"
  #config.vm.provision_run :once  
  ## :once or :always with :once being the default
  
  
  
  
  